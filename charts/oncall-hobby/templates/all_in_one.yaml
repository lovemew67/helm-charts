---
apiVersion: v1
kind: Service
metadata:
  name: oncall-redis
spec:
  type: ClusterIP
  ports:
    - port: 6379
      targetPort: redis
  selector:
    app: oncall-redis
---
apiVersion: v1
kind: Pod
metadata:
  name: oncall-redis{{ .Values.redisPostfix }}
  labels:
    app: oncall-redis
spec:
  volumes:
    - name: redis
      {{- if not .Values.persistence.enabled }}
      emptyDir:
        sizeLimit: 500Mi
      {{- else }}
      persistentVolumeClaim:
        claimName: {{ .Values.persistence.redisExistingClaim }}
      {{- end }}
  {{- if .Values.affinity }}
  affinity:
    {{- toYaml .Values.affinity | nindent 8 }}
  {{- end }}
  {{- if .Values.nodeSelector }}
  nodeSelector:
    {{- toYaml .Values.nodeSelector | nindent 8 }}
  {{- end }}
  {{- if .Values.tolerations }}
  tolerations:
    {{- toYaml .Values.tolerations | nindent 8 }}
  {{- end }}
  restartPolicy: OnFailure
  containers:
    - name: redis
      image: redis:7.0.15-alpine3.20
      ports:
        - name: redis
          containerPort: 6379
          protocol: TCP
      volumeMounts:
        - name: redis
          mountPath: /data
---
apiVersion: v1
kind: Service
metadata:
  name: oncall-engine
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
  selector:
    app: oncall-engine
---
apiVersion: v1
kind: Pod
metadata:
  name: oncall-engine{{ .Values.enginePostfix }}
  labels:
    app: oncall-engine
spec:
  volumes:
    - name: oncall
      {{- if not .Values.persistence.enabled }}
      emptyDir:
        sizeLimit: 500Mi
      {{- else }}
      persistentVolumeClaim:
        claimName: {{ .Values.persistence.oncallExistingClaim }}
      {{- end }}
  {{- if .Values.affinity }}
  affinity:
    {{- toYaml .Values.affinity | nindent 8 }}
  {{- end }}
  {{- if .Values.nodeSelector }}
  nodeSelector:
    {{- toYaml .Values.nodeSelector | nindent 8 }}
  {{- end }}
  {{- if .Values.tolerations }}
  tolerations:
    {{- toYaml .Values.tolerations | nindent 8 }}
  {{- end }}
  restartPolicy: OnFailure
  initContainers:
    - name: migration
      image: grafana/oncall:v1.13.11
      command:
        - "sh"
        - "-c"
      args:
        - "while true; do nc -zv oncall-redis 6379 && python manage.py migrate --noinput && break || sleep 2; done"
      env:
        - name: DATABASE_TYPE
          value: "sqlite3"
        - name: BROKER_TYPE
          value: "redis"
        - name: BASE_URL
          value: "http://localhost:8080"
        - name: SECRET_KEY
          value: {{ .Values.secretKey }}
        - name: REDIS_URI
          value: "redis://oncall-redis:6379/0"
        - name: DJANGO_SETTINGS_MODULE
          value: "settings.hobby"
        - name: CELERY_WORKER_QUEUE
          value: "default,critical,long,slack,telegram,webhook,retry,celery,grafana"
        - name: CELERY_WORKER_CONCURRENCY
          value: "1"
        - name: CELERY_WORKER_MAX_TASKS_PER_CHILD
          value: "100"
        - name: CELERY_WORKER_SHUTDOWN_INTERVAL
          value: "65m"
        - name: CELERY_WORKER_BEAT_ENABLED
          value: "True"
        - name: GRAFANA_API_URL
          value: {{ .Values.grafanaApiUrl }}
        - name: GRAFANA_CLOUD_ONCALL_API_URL
          value: {{ .Values.grafanaCloudOncallApiUrl }}
      volumeMounts:
        - name: oncall
          mountPath: /var/lib/oncall
  containers:
    - name: celery
      image: grafana/oncall:v1.13.11
      command:
        - "sh"
        - "-c"
      args:
        - "./celery_with_exporter.sh"
      env:
        - name: DATABASE_TYPE
          value: "sqlite3"
        - name: BROKER_TYPE
          value: "redis"
        - name: BASE_URL
          value: "http://localhost:8080"
        - name: SECRET_KEY
          value: {{ .Values.secretKey }}
        - name: REDIS_URI
          value: "redis://oncall-redis:6379/0"
        - name: DJANGO_SETTINGS_MODULE
          value: "settings.hobby"
        - name: CELERY_WORKER_QUEUE
          value: "default,critical,long,slack,telegram,webhook,retry,celery,grafana"
        - name: CELERY_WORKER_CONCURRENCY
          value: "1"
        - name: CELERY_WORKER_MAX_TASKS_PER_CHILD
          value: "100"
        - name: CELERY_WORKER_SHUTDOWN_INTERVAL
          value: "65m"
        - name: CELERY_WORKER_BEAT_ENABLED
          value: "True"
        - name: GRAFANA_API_URL
          value: {{ .Values.grafanaApiUrl }}
        - name: GRAFANA_CLOUD_ONCALL_API_URL
          value: {{ .Values.grafanaCloudOncallApiUrl }}
      volumeMounts:
        - name: oncall
          mountPath: /var/lib/oncall
    - name: engine
      image: grafana/oncall:v1.13.11
      command:
        - "sh"
        - "-c"
      args:
        - "uwsgi --ini uwsgi.ini"
      env:
        - name: DATABASE_TYPE
          value: "sqlite3"
        - name: BROKER_TYPE
          value: "redis"
        - name: BASE_URL
          value: "http://localhost:8080"
        - name: SECRET_KEY
          value: {{ .Values.secretKey }}
        - name: REDIS_URI
          value: "redis://oncall-redis:6379/0"
        - name: DJANGO_SETTINGS_MODULE
          value: "settings.hobby"
        - name: CELERY_WORKER_QUEUE
          value: "default,critical,long,slack,telegram,webhook,retry,celery,grafana"
        - name: CELERY_WORKER_CONCURRENCY
          value: "1"
        - name: CELERY_WORKER_MAX_TASKS_PER_CHILD
          value: "100"
        - name: CELERY_WORKER_SHUTDOWN_INTERVAL
          value: "65m"
        - name: CELERY_WORKER_BEAT_ENABLED
          value: "True"
        - name: GRAFANA_API_URL
          value: {{ .Values.grafanaApiUrl }}
        - name: GRAFANA_CLOUD_ONCALL_API_URL
          value: {{ .Values.grafanaCloudOncallApiUrl }}
      ports:
        - name: http
          containerPort: 8080
          protocol: TCP
      volumeMounts:
        - name: oncall
          mountPath: /var/lib/oncall
